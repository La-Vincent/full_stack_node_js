{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","services/person.js","App.js","serviceWorker.js","index.js"],"names":["Persons","persons","filter","handleDelete","person","name","toLowerCase","includes","map","p","key","id","number","onClick","PersonForm","handleNameChange","handleNumberChange","handleSubmit","onSubmit","value","onChange","type","Filter","handleChange","Notification","message","customClass","className","url","axios","get","then","res","data","post","r","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","notification","setNotification","useEffect","personService","hasNotification","Object","keys","length","e","target","preventDefault","reduce","exist","window","confirm","updatedPerson","updated","existing","concat","setTimeout","catch","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.d78b267c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Persons = ({ persons, filter, handleDelete }) => (\n\t<div>\n\t\t{persons.filter(person => {\n\t\t\tconst { name } = person;\n\t\t\treturn name.toLowerCase().includes(filter.toLowerCase())\n\t\t}).map(p => (\n\t\t\t<div key={p.id}>\n\t\t\t\t<span>{p.name} {p.number}</span>\n\t\t\t\t<button onClick={() => handleDelete(p)}>delete</button>\n\t\t\t</div>\n\t\t\t))}\n\t</div>\n)\n\nexport default Persons","import React from 'react';\n\nconst PersonForm = ({ name, number, handleNameChange, handleNumberChange, handleSubmit }) => {\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<div>\n\t\t\t\tname: <input value={name} onChange={handleNameChange}/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\tnumber: <input value={number} onChange={handleNumberChange}/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<button type=\"submit\">add</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nexport default PersonForm","import React from 'react';\n\nconst Filter = ({ filter, handleChange }) => (\n\t<div>filter shown with <input value={filter} onChange={handleChange}/></div>\n)\n\nexport default Filter","import React from 'react';\nimport '../index.css';\n\nconst Notification = ({ type, message }) => {\n\n\tconst customClass = type === 'error' ? 'error-notification' : 'success-notification'\n\n\treturn (\n\t\t<div className={`notification ${customClass}`}>\n\t\t\t<h3>{message}</h3>\n\t\t</div>\n\t)\n\n}\n\nexport default Notification;","import axios from 'axios'\n\nconst url = '/api/persons'\n\nconst getAll = () => {\n\treturn axios.get(url).then(res => res.data)\n}\n\nconst createOne = person => {\n\treturn axios.post(`${url}`, person).then(r => r.data)\n\n}\n\nconst updateOne = person => {\n\tconst { id } = person;\n\treturn axios.put(`${url}/${id}`, person).then(r => r.data);\n}\n\nconst deleteOne = id => {\n\treturn axios.delete(`${url}/${id}`)\n}\n\nexport default {\n\tgetAll,\n\tcreateOne,\n\tupdateOne,\n\tdeleteOne\n};\n","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons';\nimport PersonForm from './components/PersonForm';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\nimport personService from './services/person';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notification, setNotification] = useState({});\n\n  useEffect(() => {\n    personService.getAll().then(r => setPersons(r))\n  }, [])\n\n  const handleFilterChange = e => setFilter(e.target.value);\n  const handleNameChange = e => setNewName(e.target.value);\n  const handleNumberChange = e => setNewNumber(e.target.value);\n\n  const checkExist = name => persons.reduce((exist, person) => exist || person.name === name, false)\n\n  const handleDelete = (person) => {\n    const { id, name } = person;\n    const confirmed = window.confirm(`Delete ${name}?`)\n    if (confirmed) {\n      personService.deleteOne(id)\n        .then(r => setPersons(persons.filter(person => person.id !== id)))\n        .catch(() => setNotification({ type: 'error', message: `Information of ${name} has already been removed from the server`}))\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const exist = checkExist(newName);\n    \n    if (exist) {\n      const confirmed = window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`);\n      if (confirmed) {\n        const [person] = persons.filter(person => person.name === newName);\n        const updatedPerson = { ...person, number: newNumber };\n        personService.updateOne(updatedPerson)\n          .then(updated => setPersons(persons.map(existing => existing.id === updated.id ? updated : existing)))\n      }\n    } else {\n      const person = {\n        name: newName,\n        number: newNumber\n      };\n      personService.createOne(person).then(p => {\n        setNotification({ type: 'success', message: `Added ${newName}` });\n        setPersons(persons.concat(p));\n\n        setTimeout(() => {\n          setNotification({})\n        }, 5000);\n      })\n      setNewName('');\n      setNewNumber('');\n    }\n  }\n\n  const hasNotification = Object.keys(notification).length > 0;\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {hasNotification && <Notification {...notification}/>}\n      <Filter filter={filter} handleChange={handleFilterChange} />\n      <PersonForm name={newName} number={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} handleSubmit={handleSubmit}/>\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} handleDelete={handleDelete} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}